#include <stdio.h>
#include <stdint.h>

// Initial Permutation Table
const int IP[] = {58, 50, 42, 34, 26, 18, 10, 2,
                   60, 52, 44, 36, 28, 20, 12, 4,
                   62, 54, 46, 38, 30, 22, 14, 6,
                   64, 56, 48, 40, 32, 24, 16, 8,
                   57, 49, 41, 33, 25, 17, 9, 1,
                   59, 51, 43, 35, 27, 19, 11, 3,
                   61, 53, 45, 37, 29, 21, 13, 5,
                   63, 55, 47, 39, 31, 23, 15, 7};

// Final Permutation Table
const int FP[] = {40, 8, 48, 16, 56, 24, 64, 32,
                   39, 7, 47, 15, 55, 23, 63, 31,
                   38, 6, 46, 14, 54, 22, 62, 30,
                   37, 5, 45, 13, 53, 21, 61, 29,
                   36, 4, 44, 12, 52, 20, 60, 28,
                   35, 3, 43, 11, 51, 19, 59, 27,
                   34, 2, 42, 10, 50, 18, 58, 26,
                   33, 1, 41, 9, 49, 17, 57, 25};

// Expansion Table
const int E[] = {32, 1, 2, 3, 4, 5,
                 4, 5, 6, 7, 8, 9,
                 8, 9, 10, 11, 12, 13,
                 12, 13, 14, 15, 16, 17,
                 16, 17, 18, 19, 20, 21,
                 20, 21, 22, 23, 24, 25,
                 24, 25, 26, 27, 28, 29,
                 28, 29, 30, 31, 32, 1};

// S-boxes (Substitution boxes)
const int S[8][4][16] = {
    // S1
    {
        {14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
        {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
        {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
        {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}
    },
    // S2
    {
        {15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
        {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
        {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
        {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}
    },
    // S3
    {
        {10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
        {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
        {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
        {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}
    },
    // S4
    {
        {7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
        {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
        {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
        {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}
    },
    // S5
    {
        {2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
        {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
        {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
        {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}
    },
    // S6
    {
        {12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
        {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
        {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
        {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}
    },
    // S7
    {
        {4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
        {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
        {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
        {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}
    },
    // S8
    {
        {13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
        {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
        {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8},
        {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}
    }
};

// Permutation P Box
const int P[] = {16, 7, 20, 21, 29, 12, 28, 17,
                 1, 15, 23, 26, 5, 18, 31, 10,
                 2, 8, 24, 14, 32, 27, 3, 9,
                 19, 13, 30, 6, 22, 11, 4, 25};

// Initial permutation of the key
const int PC1[] = {57, 49, 41, 33, 25, 17, 9,
                    1, 58, 50, 42, 34, 26, 18,
                    10, 2, 59, 51, 43, 35, 27,
                    19, 11, 3, 60, 52, 44, 36,
                    63, 55, 47, 39, 31, 23, 15,
                    7, 62, 54, 46, 38, 30, 22,
                    14, 6, 61, 53, 45, 37, 29,
                    21, 13, 5, 28, 20, 12, 4};

// Permutation of shifted key (PC2)
const int PC2[] = {14, 17, 11, 24, 1, 5,
                    3, 28, 15, 6, 21, 10,
                    23, 19, 12, 4, 26, 8,
                    16, 7, 27, 20, 13, 2,
                    41, 52, 31, 37, 47, 55,
                    30, 40, 51, 45, 33, 48,
                    44, 49, 39, 56, 34, 53,
                    46, 42, 50, 36, 29, 32};

// Left Shift Schedule for Key Generation (Decryption)
const int LEFT_SHIFT_SCHEDULE[] = {1, 1, 2, 2, 2, 2, 2, 2,
                                   1, 2, 2, 2, 2, 2, 2, 1};

// Key for decryption (K1, K2, ..., K16)
uint64_t keys[16];

// Function prototypes
uint64_t permute(uint64_t data, const int *table, int size);
uint32_t f(uint32_t right, uint64_t subkey);
void generate_keys(uint64_t key);
void des_decrypt(uint64_t *data);

int main() {
    uint64_t ciphertext = 0x85E813540F0AB405; // Example ciphertext
    uint64_t key = 0x133457799BBCDFF1;        // Example key
    generate_keys(key);

    printf("Ciphertext: 0x%016llX\n", ciphertext);
    des_decrypt(&ciphertext);
    printf("Plaintext: 0x%016llX\n", ciphertext);

    return 0;
}

// Function to permute data according to the given table
uint64_t permute(uint64_t data, const int *table, int size) {
    uint64_t permuted_data = 0;
    for (int i = 0; i < size; i++) {
        permuted_data <<= 1;
        permuted_data |= (data >> (64 - table[i])) & 1;
    }
    return permuted_data;
}

// Function to perform one round of DES
uint32_t f(uint32_t right, uint64_t subkey) {
    // Expansion
    uint64_t expanded = permute((uint64_t)right, E, 48);
    
    // XOR with subkey
    expanded ^= subkey;
    
    // Substitution
    uint32_t substituted = 0;
    for (int i = 0; i < 8; i++) {
        int row = ((expanded & 0x800000000000) >> 42) | ((expanded & 0x4000000000) >> 41);
        int col = (expanded >> (46 - i * 6)) & 0x3F;
        substituted |= S[i][row][col] << (28 - i * 4);
    }

    // Permutation
    return permute(substituted, P, 32);
}

// Function to generate decryption keys
void generate_keys(uint64_t key) {
    // Initial permutation of the key
    uint64_t permuted_key = permute(key, PC1, 56);

    // Split into left and right halves
    uint32_t left = permuted_key >> 28;
    uint32_t right = permuted_key & 0xFFFFFFF;

    // Generate keys in reverse order
    for (int i = 15; i >= 0; i--) {
        // Perform left shifts
        for (int j = 0; j < LEFT_SHIFT_SCHEDULE[i]; j++) {
            left = ((left << 1) & 0xFFFFFFF) | ((left & 0x8000000) >> 27);
            right = ((right << 1) & 0xFFFFFFF) | ((right & 0x8000000) >> 27);
        }

        // Merge left and right halves
        uint64_t merged = ((uint64_t)left << 28) | right;

        // Permute merged key
        keys[i] = permute(merged, PC2, 48);
    }
}

// Function to perform DES decryption
void des_decrypt(uint64_t *data) {
    // Initial permutation
    *data = permute(*data, IP, 64);

    // Split into left and right halves
    uint32_t left = *data >> 32;
    uint32_t right = *data & 0xFFFFFFFF;

    // 16 rounds of encryption
    for (int i = 0; i < 16; i++) {
        uint32_t temp = right;
        right = left ^ f(right, keys[i]);
        left = temp;
    }

    // Final permutation
    *data = ((uint64_t)right << 32) | left;
    *data = permute(*data, FP, 64);
}
